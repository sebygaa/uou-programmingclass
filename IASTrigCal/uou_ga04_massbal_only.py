# -*- coding: utf-8 -*-
"""UoU_Ga04_MassBal_only.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yu04kC7nMVX5nSYS3oJpiwGacAWs2SST

# Import packages
"""

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

"""# Key parameters"""

L = 1
v = 0.2                 # advection velocity (m/sec)
N = 41
k_mass = [0.05, 0.05]   # mass transfer coefficient (1/sec)

R_gas = 8.3145          # gas constant (J/mol/K)
T_gas = 300             # temperature (K)
rho_s = 1000            # solid density (kg/m^3)
epsi = 0.3              # void fraction (m^3/m^3)
D_dif = 1E-6            # axial dispersion coefficient (m^2/sec)

## Inlet concentration (mol/m^3)
C1_sta = 1E5/R_gas/T_gas    # 1 bar partial pressure of component 1 (CO2)
C2_sta = 0E5/R_gas/T_gas    # 0 bar partial pressure of component 2 (N2)

"""# Isotherm Model"""

def ex_Lang(P,iso_params):
    denom = 1
    numer = []
    for iso,pp in zip(iso_params,P):
        denom = denom + iso[1]*pp
    for iso, pp in zip(iso_params, P):
        numer.append(iso[0]*iso[1]*pp)
    return (1/denom)*np.array(numer)

iso_par1 = [3, 1]
iso_par2 = [1, 0.5]
p_tmp = np.linspace(0,49)
q_tmp = ex_Lang([p_tmp,p_tmp], [iso_par1, iso_par2])
plt.plot(p_tmp,q_tmp[0])
plt.plot(p_tmp,q_tmp[1])

"""# FDM matrix"""

h = L/(N-1)
h_arr = h*np.ones(N)
d0 = np.diag(-1/h_arr[1:],k = -1)
d1 = np.diag(1/h_arr, k = 0)
d = d0 + d1
d[0,0] = 0
d[-1,-1] = 0
d[-1, -2] = 0
print('d=')
print(d)

dd0 = np.diag(1/h_arr[1:]**2, k = -1)
dd1 = np.diag(-2/h_arr**2)
dd2 = np.diag(1/h_arr[1:]**2,k = 1)
dd = dd0 + dd1 + dd2
dd[0,: ] = 0
dd[-1,-2] = 1/h**2
dd[-1,-1] = -1/h**2
print('dd=')
print(dd)

PP1 = 0E5*np.ones(N)
PP2 = 1E5*np.ones(N)
qsta = ex_Lang([PP1/1E5,PP2/1E5], [iso_par1, iso_par2])
print(qsta[0])
print(qsta[1])

"""# ODE function for mass balance"""

a = [1,2,3]
b = [4, 5, 6]
c = a + b
ddd = np.array(a) + np.array(b)
e = np.array(a)
f = np.array(b)

g = list(e)+list(f)
hh = np.array(g)
ii = np.array(c) + hh


hh = np.concatenate((e,f))
hh_sp = np.reshape(hh,[-1,3])
hh_sp = np.reshape(hh,[2,3])
hh_re = np.reshape(hh_sp, [-1])
ii = np.concatenate((e,f)) + np.array(c)

print(c)
print(g)
print(ii)
print(hh_re)

def massbal(y,t):
    C1 = y[0:N]
    C2 = y[1*N:2*N]
    q1 = y[2*N:3*N]
    q2 = y[3*N:4*N]
    dC1 = d@C1
    ddC1 = dd@C1
    dC2 = d@C2
    ddC2 = dd@C2
    P1 = C1*R_gas*T_gas # partial pressure of component 1
    P2 = C2*R_gas*T_gas # partial pressure of component 2

    qsta = ex_Lang([P1/1E5,P2/1E5], [iso_par1, iso_par2]) # partial pressure in bar
    qsta1 = np.array(qsta[0])
    qsta2 = np.array(qsta[1])
    dq1dt = k_mass[0]*(qsta1 - q1)
    dq2dt = k_mass[1]*(qsta2 - q2)

    dC1dt = -v*dC1 + D_dif*ddC1 - (1-epsi)/epsi*rho_s*dq1dt
    dC2dt = -v*dC2 + D_dif*ddC2 - (1-epsi)/epsi*rho_s*dq2dt
    dC1dt[0] = +v*(C1_sta - C1[0])/h - (1-epsi)/epsi*rho_s*dq1dt[0]
    dC2dt[0] = +v*(C2_sta - C2[0])/h - (1-epsi)/epsi*rho_s*dq2dt[0]
    dC1dt[-1] = +v*(C1[-2]- C1[-1])/h - (1-epsi)/epsi*rho_s*dq1dt[-1]
    dC2dt[-1] = +v*(C2[-2]- C2[-1])/h - (1-epsi)/epsi*rho_s*dq2dt[-1]

    dydt = np.concatenate((dC1dt,dC2dt,dq1dt,dq2dt))
    return dydt

"""# Solve with "odeint"
"""

C1_init = 0E5/R_gas/T_gas*np.ones(N) # 0 bar partial pressure
C2_init = 1E5/R_gas/T_gas*np.ones(N) # 1 bar partial pressure
q_scalar = ex_Lang([0, 1],[iso_par1, iso_par2])
q1_init = q_scalar[0]*np.ones(N)
q2_init = q_scalar[1]*np.ones(N)

y0 = np.concatenate((C1_init, C2_init, q1_init,q2_init))
t_test = np.linspace(0,100,1001)
y_res = odeint(massbal,y0, t_test)

"""# Sort the state variables"""

C1_res = y_res[:,0:N]
C2_res = y_res[:,1*N:2*N]
q1_res = y_res[:,2*N:3*N]
q2_res = y_res[:,3*N:4*N]

"""# Graph for the results

## C1
"""

plt.figure(dpi = 90)
lstyle = ['-','--','-.',(0,(3,3,1,3,1,3)),':',]
cline = 0
C_res = C1_res
z = L*np.linspace(0,1,N)
for i in range(0,len(t_test),100):
    plt.plot(z,C_res[i,:],
    color = 'k', linestyle = lstyle[cline%len(lstyle)],
    label = 't = {0:4.2f}'.format(t_test[i]))
    cline = cline + 1
plt.legend(loc = [1.03, 0.02])
plt.ylabel('Concentration 1 (mol/m$^{3}$)')
plt.xlabel('Axial distance (m)')
plt.grid(linestyle = ':', linewidth = 0.7)

"""## C2"""

plt.figure(dpi = 90)
lstyle = ['-','--','-.',(0,(3,3,1,3,1,3)),':',]
cline = 0
C_res = C2_res
z = L*np.linspace(0,1,N)
for i in range(0,len(t_test),100):
    plt.plot(z,C_res[i,:],
    color = 'k', linestyle = lstyle[cline%len(lstyle)],
    label = 't = {0:4.2f}'.format(t_test[i]))
    cline = cline + 1
plt.legend(loc = [1.03, 0.02])
plt.ylabel('Concentration 2 (mol/m$^{3}$)')
plt.xlabel('Axial distance (m)')
plt.grid(linestyle = ':', linewidth = 0.7)

"""## q1"""

plt.figure(dpi = 90)
lstyle = ['-','--','-.',(0,(3,3,1,3,1,3)),':',]
cline = 0
C_res = q1_res
z = L*np.linspace(0,1,N)
for i in range(0,len(t_test),100):
    plt.plot(z,C_res[i,:],
    color = 'k', linestyle = lstyle[cline%len(lstyle)],
    label = 't = {0:4.2f}'.format(t_test[i]))
    cline = cline + 1
plt.legend(loc = [1.03, 0.02])
plt.ylabel('uptake 1 (mol/kg)')
plt.xlabel('Axial distance (m)')
plt.grid(linestyle = ':', linewidth = 0.7)

"""## q2"""

plt.figure(dpi = 90)
lstyle = ['-','--','-.',(0,(3,3,1,3,1,3)),':',]
cline = 0
C_res = q2_res
z = L*np.linspace(0,1,N)
for i in range(0,len(t_test),100):
    plt.plot(z,C_res[i,:],
    color = 'k', linestyle = lstyle[cline%len(lstyle)],
    label = 't = {0:4.2f}'.format(t_test[i]))
    cline = cline + 1
plt.legend(loc = [1.03, 0.02])
plt.ylabel('uptake 2 (mol/kg)')
plt.xlabel('Axial distance (m)')
plt.grid(linestyle = ':', linewidth = 0.7)

"""# OVERALL PRESSURE ?????"""

# Overall pressure is a sum of all the partial pressure
P_ov = (C1_res + C2_res)*R_gas*T_gas/1E5 # in bar

plt.figure(dpi = 90)
lstyle = ['-','--','-.',(0,(3,3,1,3,1,3)),':',]
cline = 0
C_res = P_ov
z = L*np.linspace(0,1,N)
for i in range(0,len(t_test),100):
    plt.plot(z,C_res[i,:],
    color = 'k', linestyle = lstyle[cline%len(lstyle)],
    label = 't = {0:4.2f}'.format(t_test[i]))
    cline = cline + 1
plt.legend(loc = [1.03, 0.02])
plt.ylabel('overall pressure (bar)')
plt.xlabel('Axial distance (m)')
plt.grid(linestyle = ':', linewidth = 0.7)

